using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Options;
using Repositories.Model;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Security.Principal;
using System.Threading.Tasks;
using PlanningApi.Auth;
using PlanningApi.Services;
using static PlanningApi.Helpers.Constants;

namespace PlanningApi.Auth
{
    public class JwtFactory : IJwtFactory
    {
        private readonly JwtIssuerOptions _jwtOptions;
        private UserManager<User> _userManager;

        public JwtFactory(IOptions<JwtIssuerOptions> jwtOptions
            , UserManager<User> userManager
            )
        {
            _userManager = userManager;
            _jwtOptions = jwtOptions.Value;
            ThrowIfInvalidOptions(_jwtOptions);
        }

        /// <summary>
        /// generate an encoded token with some claims that we are able to decode ( https://jwt.io/ ) 
        /// </summary>
        /// <param name="identity">identity Claims generated by _jwtFactory.GenerateClaimsIdentity(string iduser, User U)</param>
        /// <returns></returns>
        public async Task<string> GenerateEncodedToken(ClaimsIdentity identity)
        {

            var claims = new List<Claim>
         {
                 new Claim(JwtRegisteredClaimNames.Sub, identity.Claims.Single(c => c.Type == ClaimTypes.Name).Value),
                 new Claim(JwtRegisteredClaimNames.Jti, await _jwtOptions.JtiGenerator()),
                 new Claim(JwtRegisteredClaimNames.Iat, ToUnixEpochDate(_jwtOptions.IssuedAt).ToString(), ClaimValueTypes.Integer64),
                 new Claim(JwtRegisteredClaimNames.Iat, ToUnixEpochDate(_jwtOptions.IssuedAt).ToString(), ClaimValueTypes.Integer64),
                 identity.FindFirst(JwtClaimIdentifiers.Id),
                 identity.FindFirst(JwtClaimIdentifiers.IdIdentity)
             };

            var roleClaims = identity.Claims.Where(c => c.Type == ClaimTypes.Role).ToList();

            foreach (var claim in roleClaims)
            {
                claims.Add(new Claim(ClaimTypes.Role, claim.Value));
            }

            // Create the JWT security token and encode it.
            var jwt = new JwtSecurityToken(
                issuer: _jwtOptions.Issuer,
                audience: _jwtOptions.Audience,
                claims: claims,
                notBefore: _jwtOptions.NotBefore,
                expires: _jwtOptions.Expiration,
                signingCredentials: _jwtOptions.SigningCredentials);

            var encodedJwt = new JwtSecurityTokenHandler().WriteToken(jwt);
            Debug.WriteLine("Nicki--:" + encodedJwt);
            return encodedJwt;
        }


        /// <summary>
        /// it generates the user claims. add what you need as claims here
        /// </summary>
        /// <param name="Id">ID User</param>
        /// <param name="user">Identity user</param>
        /// <returns></returns>
        public ClaimsIdentity GenerateClaimsIdentity(User user)
        {
            //get user roles
            var roles = _userManager.GetRolesAsync(user).Result.ToArray();
            var claims = new List<Claim>()
            {
                new Claim(JwtClaimIdentifiers.Id , user.Id), 
                new Claim(ClaimTypes.Role, JwtClaims.ApiAccess),
            };

            //put Roles to ClaimsIdentity List
            if (roles.Count() > 0)
            {
                foreach (var role in roles)
                {
                    claims.Add(new Claim(ClaimTypes.Role, role));
                }
            }

            return new ClaimsIdentity(new GenericIdentity(user.UserName, "Token"), claims);
        }

        /// <returns>Date converted to seconds since Unix epoch (Jan 1, 1970, midnight UTC).</returns>
        private static long ToUnixEpochDate(DateTime date)
          => (long)Math.Round((date.ToUniversalTime() -
                               new DateTimeOffset(1970, 1, 1, 0, 0, 0, TimeSpan.Zero))
                              .TotalSeconds);

        private static void ThrowIfInvalidOptions(JwtIssuerOptions options)
        {
            if (options == null) throw new ArgumentNullException(nameof(options));

            if (options.ValidFor <= TimeSpan.Zero)
            {
                throw new ArgumentException("Must be a non-zero TimeSpan.", nameof(JwtIssuerOptions.ValidFor));
            }

            if (options.SigningCredentials == null)
            {
                throw new ArgumentNullException(nameof(JwtIssuerOptions.SigningCredentials));
            }

            if (options.JtiGenerator == null)
            {
                throw new ArgumentNullException(nameof(JwtIssuerOptions.JtiGenerator));
            }
        }

    }
}
